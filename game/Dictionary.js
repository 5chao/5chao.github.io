// Generated by CoffeeScript 1.9.2
(function() {
  var Dictionary, root,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Dictionary = (function() {
    function Dictionary(originalWordList, grid) {
      this.originalWordList = originalWordList;
      if (grid != null) {
        this.setGrid(grid);
      }
    }

    Dictionary.prototype.setGrid = function(grid1) {
      var j, ref, results, w, word, x, y;
      this.grid = grid1;
      this.wordList = this.originalWordList.slice(0);
      this.wordList = (function() {
        var j, len, ref, results;
        ref = this.wordList;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          word = ref[j];
          if (word.length <= this.grid.size) {
            results.push(word);
          }
        }
        return results;
      }).call(this);
      this.minWordLength = this.grid.size;
      this.minWordLength = Math.min.apply(Math, (function() {
        var j, len, ref, results;
        ref = this.wordList;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          w = ref[j];
          results.push(w.length);
        }
        return results;
      }).call(this));
      this.usedWords = [];
      results = [];
      for (x = j = 0, ref = this.grid.size; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (y = k = 0, ref1 = this.grid.size; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
            results1.push((function() {
              var l, len, ref2, results2;
              ref2 = this.wordsThroughTile(x, y);
              results2 = [];
              for (l = 0, len = ref2.length; l < len; l++) {
                word = ref2[l];
                results2.push(this.markUsed(word));
              }
              return results2;
            }).call(this));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Dictionary.prototype.markUsed = function(str) {
      if (indexOf.call(this.usedWords, str) >= 0) {
        return false;
      } else {
        this.usedWords.push(str);
        return true;
      }
    };

    Dictionary.prototype.isWord = function(str) {
      return indexOf.call(this.wordList, str) >= 0;
    };

    Dictionary.prototype.isNewWord = function(str) {
      return indexOf.call(this.wordList, str) >= 0 && indexOf.call(this.usedWords, str) < 0;
    };

    Dictionary.prototype.wordsThroughTile = function(x, y) {
      var addTiles, grid, j, k, l, len, length, offset, range, ref, ref1, ref2, results, str, strings;
      grid = this.grid;
      strings = [];
      for (length = j = ref = this.minWordLength, ref1 = grid.size; ref <= ref1 ? j <= ref1 : j >= ref1; length = ref <= ref1 ? ++j : --j) {
        range = length - 1;
        addTiles = function(func) {
          var i;
          return strings.push(((function() {
            var k, ref2, results;
            results = [];
            for (i = k = 0, ref2 = range; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
              results.push(func(i));
            }
            return results;
          })()).join(''));
        };
        for (offset = k = 0, ref2 = length; 0 <= ref2 ? k < ref2 : k > ref2; offset = 0 <= ref2 ? ++k : --k) {
          if (grid.inRange(x - offset, y) && grid.inRange(x - offset + range, y)) {
            addTiles(function(i) {
              return grid.tiles[x - offset + i][y];
            });
          }
          if (grid.inRange(x, y - offset) && grid.inRange(x, y - offset + range)) {
            addTiles(function(i) {
              return grid.tiles[x][y - offset + i];
            });
          }
          if (grid.inRange(x - offset, y - offset) && grid.inRange(x - offset + range, y - offset + range)) {
            addTiles(function(i) {
              return grid.tiles[x - offset + i][y - offset + i];
            });
          }
          if (grid.inRange(x - offset, y + offset) && grid.inRange(x - offset + range, y + offset - range)) {
            addTiles(function(i) {
              return grid.tiles[x - offset + i][y + offset - i];
            });
          }
        }
      }
      results = [];
      for (l = 0, len = strings.length; l < len; l++) {
        str = strings[l];
        if (this.isWord(str)) {
          results.push(str);
        }
      }
      return results;
    };

    return Dictionary;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Dictionary = Dictionary;

}).call(this);

//# sourceMappingURL=Dictionary.js.map
